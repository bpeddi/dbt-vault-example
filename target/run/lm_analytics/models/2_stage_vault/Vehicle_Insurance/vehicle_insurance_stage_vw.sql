
  create or replace   view dbt_test.dbt_test.vehicle_insurance_stage_vw
  
   as (
    /* set yaml_metadata and endset are used for assigning variable ( key value pairs) *//* fromyml() built-in jinja function  assigns values to variables */




/*
dbtvault will generate a stage using parameters provided in the next steps.
The recommended materialization for a stage is view, as the stage layer contains minimal transformations on the raw staging layer which need to remain in sync. 
The "source model" for a stage is coming from src_<tablename>_vw
the "derived_columns" derives source, effective_from & end_date
the "hashed_columns" represent columns to be hashed on business keys 
the "ranked_columns" and "null_columns" are not used 
Refer to following link for additional info https://dbtvault.readthedocs.io/en/latest/tutorial/tut_staging/
*/


-- Generated by dbtvault.

    

WITH source_data AS (

    SELECT

    "VEHICLE_INSURANCE_ID",
    "GENDER",
    "AGE",
    "DRIVING_LICENSE",
    "REGION_CODE",
    "PREVIOUSLY_INSURED",
    "VEHICLE_AGE",
    "VEHICLE_DAMAGE",
    "ANNUAL_PREMIUM",
    "POLICY_SALES_CHANNEL",
    "VINTAGE",
    "SOURCE",
    "REC_CREATE_DATE",
    "REC_UPDATE_DATE",
    "REC_CREATE_BY",
    "REC_UPDATE_BY"

    FROM dbt_test.dbt_test.src_vehicle_insurance_vw
),

derived_columns AS (

    SELECT

    "VEHICLE_INSURANCE_ID",
    "GENDER",
    "AGE",
    "DRIVING_LICENSE",
    "REGION_CODE",
    "PREVIOUSLY_INSURED",
    "VEHICLE_AGE",
    "VEHICLE_DAMAGE",
    "ANNUAL_PREMIUM",
    "POLICY_SALES_CHANNEL",
    "VINTAGE",
    "SOURCE",
    "REC_CREATE_DATE",
    "REC_UPDATE_DATE",
    "REC_CREATE_BY",
    "REC_UPDATE_BY",
    current_timestamp AS "ETL_LOAD_DATETIME",
    current_date AS "EFFECTIVE_FROM",
    to_date('9999-12-31','YYYY-MM-DD') AS "END_DATE"

    FROM source_data
),

hashed_columns AS (

    SELECT

    "VEHICLE_INSURANCE_ID",
    "GENDER",
    "AGE",
    "DRIVING_LICENSE",
    "REGION_CODE",
    "PREVIOUSLY_INSURED",
    "VEHICLE_AGE",
    "VEHICLE_DAMAGE",
    "ANNUAL_PREMIUM",
    "POLICY_SALES_CHANNEL",
    "VINTAGE",
    "SOURCE",
    "REC_CREATE_DATE",
    "REC_UPDATE_DATE",
    "REC_CREATE_BY",
    "REC_UPDATE_BY",
    "ETL_LOAD_DATETIME",
    "EFFECTIVE_FROM",
    "END_DATE",

    CAST(MD5_BINARY(NULLIF(CONCAT_WS('||',
        IFNULL(NULLIF(UPPER(TRIM(CAST("vehicle_insurance_id" AS VARCHAR))), ''), '^^')
    ), '^^')) AS BINARY(16)) AS "vehicle_insurance_hk",
    CAST(MD5_BINARY(CONCAT_WS('||',
        IFNULL(NULLIF(UPPER(TRIM(CAST("Age" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Annual_Premium" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Driving_License" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Gender" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Policy_Sales_Channel" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Previously_Insured" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Region_Code" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Source" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Vehicle_Age" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Vehicle_Damage" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("vehicle_insurance_id" AS VARCHAR))), ''), '^^'),
        IFNULL(NULLIF(UPPER(TRIM(CAST("Vintage" AS VARCHAR))), ''), '^^')
    )) AS BINARY(16)) AS "hashdiff"

    FROM derived_columns
),

columns_to_select AS (

    SELECT

    "VEHICLE_INSURANCE_ID",
    "GENDER",
    "AGE",
    "DRIVING_LICENSE",
    "REGION_CODE",
    "PREVIOUSLY_INSURED",
    "VEHICLE_AGE",
    "VEHICLE_DAMAGE",
    "ANNUAL_PREMIUM",
    "POLICY_SALES_CHANNEL",
    "VINTAGE",
    "SOURCE",
    "REC_CREATE_DATE",
    "REC_UPDATE_DATE",
    "REC_CREATE_BY",
    "REC_UPDATE_BY",
    "ETL_LOAD_DATETIME",
    "EFFECTIVE_FROM",
    "END_DATE",
    "VEHICLE_INSURANCE_HK",
    "HASHDIFF"

    FROM hashed_columns
)

SELECT * FROM columns_to_select
  );

